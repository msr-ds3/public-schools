parkslope <- filter(schooldata, `Zip` = 11217)
parkslope <- filter(schooldata, `Zip` == 11217)
parkslope <- filter(schooldata$Zip == 11217)
library(dplyr)
parkslope <- filter(schooldata$Zip == 11217)
parkslope <- filter(schooldata, Zip == 11217)
View(parkslop)
View(parkslope)
parkslope <- filter(schooldata, Zip == 11217, 11215 )
parkslope <- filter(schooldata, Zip == 11217 & 11215 )
parkslope <- filter(schooldata, Zip == 11217 & 11215)
parkslope <- filter(schooldata, Zip == 11217 & Zip == 11215)
parkslope <- filter(schooldata, Zip == 11217, Zip == 11215)
parkslope <- filter(schooldata, Zip == 11217, Zip == 11215)
parkslope <- filter(schooldata, Zip == 11217)
parkslope2 <- filter(schooldata, Zip == 11215)
park1 <- filter(schooldata, Zip == 11217)
park2 <- filter(schooldata, Zip == 11215)
parkslope <- inner_join(park1, park2)
parkslope <- inner_join(park1, park2, join_by = DBN)
park1 <- filter(schooldata, Zip == c(11217, 11215))
parkslope <- filter(schooldata, Zip == c(11217, 11215))
parkslope <- filter(schooldata, Zip == c(11217, 11215))
View(parkslope)
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Zip`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
#Load libraries needed
library(readxl)
library(ggplot2)
library(dplyr)
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Zip`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
qplot(factor(`Environment Rating`), data=parkslope, geom="bar", fill=factor(`Zip`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
qplot(factor(`Achievement Rating`), data=schooldata, geom="bar", fill=factor(`Achievement Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Achievement Rating")
qplot(factor(`Environment Rating`), data=parkslope, geom="bar", fill=factor(`Zip`)
qplot(factor(`Environment Rating`), data=parkslope, geom="bar", fill=factor(`Zip`)
qplot(factor(`Environment Rating`), data=parkslope, geom="bar", fill=factor(`Zip`))
qplot(factor(`Environment Rating`), data=parkslope,  fill=factor(`Zip`))
qplot(factor(`Environment Rating`), data=parkslope,  geom="point",fill=factor(`Zip`))
qplot(factor(`Environment Rating`), data=parkslope, fill=factor(`Zip`))
View(parkslope)
barplot(table(schooldata$`Environment Rating`), ylim = c(0, 700), main = "Number of Schools by Environment Rating", ylab = "Number of Schools", xlab = "Target")
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
#Load libraries needed
library(readxl)
library(ggplot2)
library(dplyr)
#################
#################################################################################
################↓↓↓↓↓↓YOU MUST DO THIS STEP MANUALLY↓↓↓↓↓↓###############
################CHANGE SCHOOL DIRECTORY TO A CSV FILE############################
#################################################################################
#Load file containing directory and basic info of all high schools
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
#Load file containing school quality report
schooltarget <- read_excel("~/public-schools/schools/schoolratings.xlsx", col_names = TRUE, skip = 1)
#Renaming column to have same name
colnames(schooldirectory)[1] <- "DBN"
#Merge left
schooldata <- merge(x = schooltarget, y = schooldirectory, by = "DBN", all.x = TRUE)
#Getting the number of school types
table(schooldata$`School Type`)
#Plotting school types, boring black and white
barplot(table(schooldata$`School Type`), ylim = c(0, 700), main = "Number of Schools by Type", ylab = "Number of Schools", xlab = "Types of schools")
#Beautiful bar with colors by the rainbow, must use, this looks nice and not boring
qplot(factor(`School Type`), data=schooldata, geom="bar", fill=factor(`School Type`), xlab = "School Type", ylab = "Number of Schools", main = "Number of Schools by Type") + theme(legend.position='none')
#################################
#PLOTTING
#################################
#Getting the number of schools by achievement rating
table(schooldata$`Achievement Rating`)
#Boring plot
barplot(table(schooldata$`Achievement Rating`), ylim = c(0, 700), main = "Number of Schools by Achievement Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors ~ achievement
qplot(factor(`Achievement Rating`), data=schooldata, geom="bar", fill=factor(`Achievement Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Achievement Rating") + theme(legend.position='none')
########################
########################
#Getting the number of schools by environment
table(schooldata$`Environment Rating`)
#Boring plot of environemnt
barplot(table(schooldata$`Environment Rating`), ylim = c(0, 700), main = "Number of Schools by Environment Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors environment
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Environment Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
#Plotting the different environment by zip code.
qplot(factor(`Environment Rating`), data=schooldata, geom="bar") + facet_wrap(~ `Zip`)
##########################
#TO DO
##########################
#Make scatter plot of environment and achievement rating
plot(schooldata$`Environment Rating`, schooldata$`Achievement Rating`)
#Achievement by school type
#Park Slope Comparison
parkslope <- filter(schooldata, Zip == c(11217, 11215))
qplot(factor(`Environment Rating`), data=parkslope, fill=factor(`Zip`))
View(schooldata)
View(schooldata)
#Load libraries needed
library(readxl)
library(ggplot2)
library(dplyr)
#################
#################################################################################
################↓↓↓↓↓↓YOU MUST DO THIS STEP MANUALLY↓↓↓↓↓↓###############
################CHANGE SCHOOL DIRECTORY TO A CSV FILE############################
#################################################################################
#Load file containing directory and basic info of all high schools
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
#Load file containing school quality report
schooltarget <- read_excel("~/public-schools/schools/schoolratings.xlsx", col_names = TRUE, skip = 1)
#Renaming column to have same name
colnames(schooldirectory)[1] <- "DBN"
#Merge left
schooldata <- merge(x = schooltarget, y = schooldirectory, by = "DBN", all.x = TRUE)
#Getting the number of school types
table(schooldata$`School Type`)
#Plotting school types, boring black and white
barplot(table(schooldata$`School Type`), ylim = c(0, 700), main = "Number of Schools by Type", ylab = "Number of Schools", xlab = "Types of schools")
#Beautiful bar with colors by the rainbow, must use, this looks nice and not boring
qplot(factor(`School Type`), data=schooldata, geom="bar", fill=factor(`School Type`), xlab = "School Type", ylab = "Number of Schools", main = "Number of Schools by Type") + theme(legend.position='none')
#################################
#PLOTTING
#################################
#Getting the number of schools by achievement rating
table(schooldata$`Achievement Rating`)
#Boring plot
barplot(table(schooldata$`Achievement Rating`), ylim = c(0, 700), main = "Number of Schools by Achievement Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors ~ achievement
qplot(factor(`Achievement Rating`), data=schooldata, geom="bar", fill=factor(`Achievement Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Achievement Rating") + theme(legend.position='none')
########################
########################
#Getting the number of schools by environment
table(schooldata$`Environment Rating`)
#Boring plot of environemnt
barplot(table(schooldata$`Environment Rating`), ylim = c(0, 700), main = "Number of Schools by Environment Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors environment
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Environment Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
#Plotting the different environment by zip code.
qplot(factor(`Environment Rating`), data=schooldata, geom="bar") + facet_wrap(~ `Zip`)
##########################
#TO DO
##########################
#Make scatter plot of environment and achievement rating
plot(schooldata$`Environment Rating`, schooldata$`Achievement Rating`)
#Achievement by school type
#Park Slope Comparison
parkslope <- filter(schooldata, Zip == c(11217, 11215))
qplot(factor(`Environment Rating`), data=parkslope, fill=factor(`Zip`))
Cardinal_Environment <- as.factor(schooldata$`Environment Rating`)
levels(Cardinal_Environment) <- 1:length(levels(Cardinal_Environment))
Cardinal_Environment <- as.numeric(Cardinal_Environment)
Cardinal_Environment<- data_frame(Cardinal_Environment)
#x1 =unclass(factor(schooldata$`Environment Rating`))
attach_toSchool_data <- cbind(schooldata, Cardinal_Environment)
View(Cardinal_Environment)
View(schooldata)
#Load libraries needed
library(readxl)
library(ggplot2)
library(dplyr)
#################
#################################################################################
################↓↓↓↓↓↓YOU MUST DO THIS STEP MANUALLY↓↓↓↓↓↓###############
################CHANGE SCHOOL DIRECTORY TO A CSV FILE############################
#################################################################################
#Load file containing directory and basic info of all high schools
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
#Load file containing school quality report
schooltarget <- read_excel("~/public-schools/schools/schoolratings.xlsx", col_names = TRUE, skip = 1)
#Renaming column to have same name
colnames(schooldirectory)[1] <- "DBN"
#Merge left
schooldata <- merge(x = schooltarget, y = schooldirectory, by = "DBN", all.x = TRUE)
#Getting the number of school types
table(schooldata$`School Type`)
#Plotting school types, boring black and white
barplot(table(schooldata$`School Type`), ylim = c(0, 700), main = "Number of Schools by Type", ylab = "Number of Schools", xlab = "Types of schools")
#Beautiful bar with colors by the rainbow, must use, this looks nice and not boring
qplot(factor(`School Type`), data=schooldata, geom="bar", fill=factor(`School Type`), xlab = "School Type", ylab = "Number of Schools", main = "Number of Schools by Type") + theme(legend.position='none')
#################################
#PLOTTING
#################################
#Getting the number of schools by achievement rating
table(schooldata$`Achievement Rating`)
#Boring plot
barplot(table(schooldata$`Achievement Rating`), ylim = c(0, 700), main = "Number of Schools by Achievement Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors ~ achievement
qplot(factor(`Achievement Rating`), data=schooldata, geom="bar", fill=factor(`Achievement Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Achievement Rating") + theme(legend.position='none')
########################
########################
#Getting the number of schools by environment
table(schooldata$`Environment Rating`)
#Boring plot of environemnt
barplot(table(schooldata$`Environment Rating`), ylim = c(0, 700), main = "Number of Schools by Environment Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors environment
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Environment Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
#Plotting the different environment by zip code.
qplot(factor(`Environment Rating`), data=schooldata, geom="bar") + facet_wrap(~ `Zip`)
##########################
#TO DO
##########################
#Make scatter plot of environment and achievement rating
plot(schooldata$`Environment Rating`, schooldata$`Achievement Rating`)
#Achievement by school type
#Park Slope Comparison
parkslope <- filter(schooldata, Zip == c(11217, 11215))
qplot(factor(`Environment Rating`), data=parkslope, fill=factor(`Zip`))
l=unique(c(as.character(schooldata$`Environment Rating`), as.character(schooldata$`Achievement Rating`)))
environments <- data.frame(Cardinal_Environment=as.numeric(factor(schooldata$`Environment Rating`, levels=l)), Cardinal_Achievement=as.numeric(factor(schooldata$`Achievement Rating`, levels=l)))
attach_toSchool_data <- cbind(schooldata, environments)
View(environments)
View(attach_toSchool_data)
plot(attach_toSchool_data$Cardinal_Environment, attach_toSchool_data$Cardinal_Achievement)
mean(attach_toSchool_data$Cardinal_Environment)
mean(attach_toSchool_data$Cardinal_Achievement)
########################################
# load libraries
########################################
library(dplyr)
library(xlsx)
library(readxl)
library(ggplot2)
library(tidyr)
# set the data directory
data_dir <- '.'
########################################
# load and clean trip data
########################################
xlss <- Sys.glob(sprintf('%s/2015/*.xls', data_dir))
vec <- c("BOROUGH", "NEIGHBORHOOD", "BUILDING_CATEGORY", "TAX_CLASS",
"BLOCK", "LOT", "EASEMENT", "BUILDING_CLASS", "ADDRESS", "APT_NUMBER", "ZIP_CODE", "RES_UNITS", "COM_UNITS", "TOTAL_UNITS",
"LAND_SQ_FT", "BUILD_SQ_FT", "YEAR_BUILT", "TAX_CLASS_AT_SALE",
"BUILD_CLASS_AT_SALE", "SALE_PRICE", "SALE_DATE")
# Load each year of sales data into one data frame
df2 <- data.frame()
for (xls in xlss) {
tmp <- read_excel(xls, col_names = vec, skip = 5)
df2 <- rbind(df2, tmp)
}
# Clear up extra NA data that shows up in the file
df2 <- na.omit(df2)
# Separate out the Building Code number from the text
states <- df2$BUILDING_CATEGORY
s <- substr(x = states, start = 1, stop = 2)
# Add the new building code number to the dataframe as an int
df2$BC_NUM <- as.numeric(s)
View(df2)
# Cut out all commercial buildings from the data
df3 <- df2[df2$BC_NUM<17 & df2$BC_NUM != 5 & df2$BC_NUM != 6,]
# Those with actual sales, not transfers for free
dfc <- df3[df3$SALE_PRICE > 0, ]
#################################
# Save the files
#################################
save(fullSales, homeSales, trueHomeSales, file = sprintf('%s/sales.RData', data_dir))
########################################
# Basic Stats on 2014-2015 data
########################################
summary(dfc)
## Average sale price by borough, only counting where sale price > 0.
avgPriceByBorough <- dfc %>% group_by(BOROUGH) %>% summarize(avgPrice = mean(SALE_PRICE))
avgPriceByBorough
## Average sale price by neighborhood, only counting where sale price > 0.
avgPriceByNeighborhood <- dfc %>% group_by(NEIGHBORHOOD) %>% summarize(avgPrice = mean(SALE_PRICE))
View(avgPriceByNeighborhood)
########################################
# PLOTTING AND MORE
########################################
# For non-zero residential sales only:
# Plot number of sales vs sale price
# Up to 5 million
ggplot(data = trueHomeSales, aes(x = SALE_PRICE)) +
geom_histogram() + xlab('Sale Price') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(0, 5000000))
# From 5 million to 100 million
ggplot(data = trueHomeSales, aes(x = SALE_PRICE)) +
geom_histogram() + xlab('Sale Price') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(5000000, 100000000))
# Over 100 million
ggplot(data = trueHomeSales, aes(x = SALE_PRICE)) +
geom_histogram() + xlab('Sale Price') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(100000000, 400000000))
# Plot number of sales vs sale price per square foot
# Up to 2500 sq. ft
ggplot(data = trueHomeSales, aes(x = SALE_PRICE/BUILD_SQ_FT)) +
geom_histogram() + xlab('Sale Price Per Sq Ft') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(0, 2500))
# Land sq ft up to 2500.
ggplot(data = trueHomeSales, aes(x = SALE_PRICE/LAND_SQ_FT)) +
geom_histogram() + xlab('Sale Price Per Sq Ft') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(0, 2500))
# Number of sales vs square feet
# Land sq ft, not including data w/none reported
ggplot(data = trueHomeSales, aes(x = LAND_SQ_FT)) +
geom_histogram() + xlab('Sale Price Per Sq Ft') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(1, 15000))
# Build sq ft
ggplot(data = trueHomeSales, aes(x = BUILD_SQ_FT)) +
geom_histogram() + xlab('Sale Price Per Sq Ft') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma, limits = c(1, 15000))
###########################
# Add Data Frame Fields
###########################
##### Separate out the APT_NUM #####
df <- separate(df, ADDRESS, into = c("ADDRESS", "APTNUM"), sep = ",", remove = TRUE, extra = "drop")
# Change empty strings/NA to something. Might not be needed.
df$APTNUM[is.na(df$APTNUM)] <- " "
df$APT_NUMBER[df$APT_NUMBER == ""] <- " "
# Now merge into one column, making a unified APT_NUM column
df <- unite(df, col = "APT_NUM", c(10,11), sep = " ", remove = TRUE)
# Convert empty strings back to NA for making an isIndividual colum
df$APT_NUM[df$APT_NUM == "              "] <- NA
# Separate by individuality or not
df <- mutate(df, "isRes" = (BC_NUM <= 4 | BC_NUM == 7 | BC_NUM == 10 | BC_NUM == 14))
# Separate by residential or not
df <- mutate(df, "isIndv" = (BC_NUM <= 3 | (BC_NUM == 7 & !is.na(APT_NUM)) | (BC_NUM == 10 & !is.na(APT_NUM)) | (BC_NUM == 14 & !is.na(APT_NUM)) ))
# Save the data for later
save(df, file = sprintf('%s/factoredSales.RData', data_dir))
# Find how many sales were commercial vs residential
ggplot(data = df, aes(x = as.factor(isRes))) +
geom_histogram() + xlab('Is Residential?') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma)
# Find, by zip code, how many of sales each building type
# Various plots, all bad
ggplot(data = df, aes(x = as.factor(BC_NUM), fill = as.factor(ZIP_CODE))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(ZIP_CODE ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(BC_NUM), fill = as.factor(ZIP_CODE))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(isRes), fill = as.factor(ZIP_CODE))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(BC_NUM), fill = as.factor(BOROUGH))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ ZIP_CODE)
ggplot(data = df, aes(x = as.factor(BC_NUM), fill = as.factor(ZIP_CODE))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(ZIP_CODE), fill = as.factor(BC_NUM))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(ZIP_CODE), fill = as.factor(isRes))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
ggplot(data = df, aes(x = as.factor(isRes), fill = as.factor(ZIP_CODE))) +
geom_histogram() + xlab('Building Type') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma) + facet_grid(facets = . ~ BOROUGH)
# Separate into 3 frames, including the true home sales and the home sales
dfL <- df[df$BC_NUM<17 & df$BC_NUM != 5 & df$BC_NUM != 6,]
dfP <- dfL[dfL$SALE_PRICE > 0, ]
# For residential sales:
# Get the number of sales by invididual vs multiple
ggplot(data = dfL, aes(x = as.factor(isIndv))) +
geom_histogram() +
xlab('Invididual') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma)
# Do again only counting non-zero sales
ggplot(data = dfP, aes(x = as.factor(isIndv))) +
geom_histogram() + xlab('Invididual?') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma)
### Sales by zipcode
### Tried a few ways to do this and am not sure what else can be done ###
ggplot(data = dfP, aes(x = as.factor(ZIP_CODE), fill = as.factor(BOROUGH))) +
geom_histogram() + xlab('Zip Code') +
ylab('Number of Sales') +
scale_y_continuous(labels=comma)
################################################################
### The names of these in the data file sales.Rdata are thus ###
################################################################
# The full sales data, without any removals
fullSales <- df2
# The sales only on housing buildings
homeSales <- df3
# Home Data that contains a real sale/no sales <= 0
trueHomeSales <- dfc
###########################
#Load libraries needed
library(readxl)
library(ggplot2)
library(dplyr)
#################
#################################################################################
################↓↓↓↓↓↓YOU MUST DO THIS STEP MANUALLY↓↓↓↓↓↓###############
################CHANGE SCHOOL DIRECTORY TO A CSV FILE############################
#################################################################################
#Load file containing directory and basic info of all high schools
schooldirectory <- read.csv("~/public-schools/schools/schooldirectory.csv", header = TRUE)
#Load file containing school quality report
schooltarget <- read_excel("~/public-schools/schools/schoolratings.xlsx", col_names = TRUE, skip = 1)
#Renaming column to have same name
colnames(schooldirectory)[1] <- "DBN"
#Merge left
schooldata <- merge(x = schooltarget, y = schooldirectory, by = "DBN", all.x = TRUE)
#Getting the number of school types
table(schooldata$`School Type`)
#Plotting school types, boring black and white
barplot(table(schooldata$`School Type`), ylim = c(0, 700), main = "Number of Schools by Type", ylab = "Number of Schools", xlab = "Types of schools")
#Beautiful bar with colors by the rainbow, must use, this looks nice and not boring
qplot(factor(`School Type`), data=schooldata, geom="bar", fill=factor(`School Type`), xlab = "School Type", ylab = "Number of Schools", main = "Number of Schools by Type") + theme(legend.position='none')
#################################
#PLOTTING
#################################
#Getting the number of schools by achievement rating
table(schooldata$`Achievement Rating`)
#Boring plot
barplot(table(schooldata$`Achievement Rating`), ylim = c(0, 700), main = "Number of Schools by Achievement Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors ~ achievement
qplot(factor(`Achievement Rating`), data=schooldata, geom="bar", fill=factor(`Achievement Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Achievement Rating") + theme(legend.position='none')
########################
########################
#Getting the number of schools by environment
table(schooldata$`Environment Rating`)
#Boring plot of environemnt
barplot(table(schooldata$`Environment Rating`), ylim = c(0, 700), main = "Number of Schools by Environment Rating", ylab = "Number of Schools", xlab = "Target")
#Plot with beautiful colors environment
qplot(factor(`Environment Rating`), data=schooldata, geom="bar", fill=factor(`Environment Rating`), xlab = "Target", ylab = "Number of Schools", main = "Number of Schools by Environment Rating") + theme(legend.position='none')
#Plotting the different environment by zip code.
qplot(factor(`Environment Rating`), data=schooldata, geom="bar") + facet_wrap(~ `Zip`)
##########################
#TO DO
##########################
#Make scatter plot of environment and achievement rating
plot(schooldata$`Environment Rating`, schooldata$`Achievement Rating`)
#Achievement by school type
#Park Slope Comparison
parkslope <- filter(schooldata, Zip == c(11217, 11215))
qplot(factor(`Environment Rating`), data=parkslope, fill=factor(`Zip`))
l=unique(c(as.character(schooldata$`Environment Rating`), as.character(schooldata$`Achievement Rating`)))
environments <- data.frame(Cardinal_Environment=as.numeric(factor(schooldata$`Environment Rating`, levels=l)), Cardinal_Achievement=as.numeric(factor(schooldata$`Achievement Rating`, levels=l)))
attach_toSchool_data <- cbind(schooldata, environments)
install.packages("ggmap")
install.packages("RgoogleMaps")
install.packages("rgdal")
installed.packages(ggplot2)
installed.packages("ggplot2")
installed.packages("stringr")
source('~/.cache/.fr-7qumAH/geocoding/find_school_district_by_address.R')
library(ggmap)
library(RgoogleMaps)
library(rgdal)
library(ggplot2)
library(stringr)
install.packages("rgdal")
source('~/.cache/.fr-7qumAH/geocoding/find_school_district_by_address.R')
source('~/.cache/.fr-7qumAH/geocoding/find_school_district_by_address.R')
source('~/.cache/.fr-7qumAH/geocoding/find_school_district_by_address.R')
source('~/.cache/.fr-7qumAH/geocoding/find_school_district_by_address.R')
install.packages("rgdal")
source('~/.cache/.fr-tSwUe2/geocoding/find_school_district_by_address.R')
install.packages("rgdal")
library(rgdal)
library(rgdal)
source('~/.cache/.fr-tSwUe2/geocoding/find_school_district_by_address.R')
source('~/.cache/.fr-tSwUe2/geocoding/find_school_district_by_address.R')
Main <- function() {
filepath <- "2013_2014_School_Zones_8May2013"
shapefile <- "ES_Zones_2013-2014"
hjlg
filepath <- "2013_2014_School_Zones_8May2013"
shapefile <- "ES_Zones_2013-2014"
input_addresses_file <- "street_addresses.csv"
school_zone_boundaries <- create_school_mapdata(filepath, shapefile)
setwd("~/.cache/.fr-tSwUe2/geocoding")
school_zone_boundaries <- create_school_mapdata(filepath, shapefile)
source('~/Downloads/geocoding/find_school_district_by_address.R')
filepath <- "2013_2014_School_Zones_8May2013"
shapefile <- "ES_Zones_2013-2014"
input_addresses_file <- "street_addresses.csv"
school_zone_boundaries <- create_school_mapdata(filepath, shapefile)
setwd("~/Downloads/geocoding")
school_zone_boundaries <- create_school_mapdata(filepath, shapefile)
address_data <- get_addresses(input_addresses_file)
proj4string(address_data) <- proj4string(school_boundaries)
proj4string(address_data) <- proj4string(schoolzone_boundaries)
proj4string(address_data) <- proj4string(school_zone_boundaries)
matched_school_zones <- over(address_data, school_zone_boundaries)
merged_data <- cbind(address_data, matched_school_zones)
merged_data
schools_df <- fortify(school_boundaries)
schools_df <- fortify(school_zone_boundaries)
nyc_map <- create_city_basemap("New York, NY")
nyc_school_map <- ggmap(nyc_map) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='red', data=fx, alpha=.5)
nyc_map <- create_city_basemap("New York, NY")
nyc_school_map <- ggmap(nyc_map) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='red', data=school_zone_boundaries, alpha=.5)
}
nyc_school_map <- ggmap(nyc_map) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='red', data=school_zone_boundaries, alpha=.5)
nyc_school_map
